BONUS CHALLENGE FORM
--------------------

For each bonus challenge you have implemented, please replace the sentence "We are not entitled to this bonus."
with a short description of:

1. How it was implemented in your code
2. Where it was used (in which class methods).
3. How you tested that it is working correctly.

--------------------

1. Fully supporting all configuration fields and avoiding the use of magic numbers

1. When needed we only used fields from the config file, such as timing and game features such as number of players and deck size.
2. Dealer::timerLoop(), Dealer::removeCardsFromTable(), Dealer::PlaceCardsOnTable(), Dealer::SleepUntilWokenOrTimeout(), Dealer::updateTimerDisplay(), Dealer::removeAllCardsFromTable(), Dealer::Dealer(), Player::Player(), Player::generateKeyPress(), Table::removeCard(), Table::placeToken(), Table::removeToken().
3. We tried different scenarios with different config inputs.

--------------------

2. Terminating all threads (that you created) gracefully and in reverse order to the order they were created in.

1. After termination of the program, both by clicking the X button or games end, the threads are gracefully terminated in reverse order.
2. Dealer::run(), Dealer::terminate, Player::terminate(), Player::createArtificialIntelligence().
3. We tried exiting the program in different scenarions, for example clicking the X button in various stages of the game, and by letting the game end without interaption.

--------------------

3. Handling the config.turnTimeoutMillis value as follows:
config.turnTimeoutMillis < 0: display nothing.
config.turnTimeoutMillis = 0: display a timer since the last action (reshuffle or set collected).
Note: in modes without a countdown timer the dealer must ensure there is always at least one legal set on the table.

We are not entitled to this bonus.

--------------------

4. Making sure that the threads do not wake up unless some actual job needs to be done (e.g., a value needs to be
changed on the display, key input needs to be handled, etc.) and the only threads created by you are:
1 thread per player + 1 additional thread for non-human players.

1. We haven't created more threads than the minimum required by the project description.
All the thread in the program are sleeping/waiting when there are no tasks to be done by them, the rest of the time when they're awake, something needs to be done.
2. Dealer::sleepUntilWokenOrTimeout(), Player::operateSlot(), Player::run(), Dealer::removeCardsFromTable(), Dealer::placeCardsOnTable(), Dealer::notifyDealer(), Dealer::removeIntersectingElementsFromAll(), Player::notifyPlayer().
3. We tested the game without giving the wait() method any specified time, for example in sleepUntilWokenOrTimeout() in the Dealer class.
